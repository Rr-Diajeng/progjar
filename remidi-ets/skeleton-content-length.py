import os
import socket
import unittest
import ssl
import base64
import re
import gzip
from io import StringIO
import hashlib
from unittest.mock import patch, MagicMock
from html.parser import HTMLParser as PyHTMLParser

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

class HTMLParser:
    # TODO:
    # 1. Assign semua value yang diperlukan
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.response = None
        self.header = None
        self.content = None
        self.BUFFER_SIZE = 1024 # PLS DO NOT CHANGE THIS VALUE
    
    def connect(self):
        # 2. Connect socket
        self.socket.connect((self.host, self.port))

    def SSL(self):
        # 3. Connect SSL
        context = ssl.create_default_context()
        self.socket = self.socket = context.wrap_socket(self.socket, server_hostname=self.host)

    def separate_header(self):
         # 4. Pisahkan header dan content
        parts = self.response.split(b"\r\n\r\n", 1)
        self.header = parts[0].decode() if parts else ""
        
        if len(parts) > 1:
            self.content = parts[1]
            try:
                self.content = gzip.decompress(self.content).decode()
            except OSError:
                # Jika terjadi kesalahan pada dekompresi, asumsikan konten tidak dikompresi
                self.content = self.content.decode()
        else:
            self.content = ""

    def send_message(self, message):
        # 5. Kirim message dan terima response
        self.response = b''
        self.socket.sendall(message.encode())
        # Terima response, gunakan self.BUFFER_SIZE sebagai ukuran buffer!
        # Ingat untuk di decode responsenya ya!

        while True:
            msg = self.socket.recv(self.BUFFER_SIZE)
            self.response += msg
            #if msg is None:
            if len(self.response) == 11892:
                break
        
        # Assign response yang sudah di decode ke self.response (TYPE: str!)
        self.separate_header()

    def get_content_length(self):
        # 9. Ambil content length
        content_length = self.response.split(b"Content-Encoding: ")[1].split(b"\r\n")[0].decode()
        return content_length
    
    def disconnect(self):
        self.socket.close()

# A 'null' stream that discards anything written to it
class NullWriter(StringIO):
    def write(self, txt):
        pass

# Unit Test
cr_response = ""
cr_response = base64.b64decode(cr_response)

server_hostname = "classroom.its.ac.id"
server_port = 443
msg_request = "GET / HTTP/1.1\r\nHost: classroom.its.ac.id\r\nSec-Ch-Ua: \"Not(A:Brand\";v=\"24\", \"Chromium\";v=\"122\"\r\nSec-Ch-Ua-Mobile: ?0\r\nSec-Ch-Ua-Platform: \"macOS\"\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\r\nSec-Fetch-Site: none\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nSec-Fetch-Dest: document\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nPriority: u=0, i\r\nConnection: close\r\n\r\n"

class TestHTMLParser(unittest.TestCase):
    def setUp(self):
        self.parser = HTMLParser(server_hostname, server_port)
        # modify socket output to be a mock object
        self.parser.socket = MagicMock()
        # set output of socket.recv to be the response every 1024 bytes
        byte_of_cr_response = [cr_response[i:i+1024] for i in range(0, len(cr_response), 1024)]
        byte_of_cr_response.append(b'')
        self.parser.socket.recv.side_effect = byte_of_cr_response

        cr_request_checksum = hashlib.md5(msg_request.encode()).hexdigest()
        print("Request checksum:", cr_request_checksum)

        cr_response_checksum = hashlib.md5(cr_response).hexdigest()
        print("Response checksum:", cr_response_checksum)

    def tearDown(self):
        self.parser.disconnect()
    
    def test_get_content_length(self):
        self.parser.send_message(msg_request)

        # print header checksum
        header_checksum = hashlib.md5(self.parser.header.encode()).hexdigest()
        print("Header checksum:", header_checksum)

        # print content checksum
        content_checksum = hashlib.md5(self.parser.content.encode()).hexdigest()
        print("Content checksum:", content_checksum)
        
        content_length = self.parser.get_content_length()
        print("Content length:", content_length)

if __name__ == "__main__":
    ENV = 'test' # Change this to 'domjudge' when submitting to DOMJudge
    if ENV != 'domjudge':
        client = HTMLParser("classroom.its.ac.id", 443)
        client.connect()
        client.SSL()
        client.send_message(msg_request)

        req_checksum = hashlib.md5(msg_request.encode()).hexdigest()
        print("Request checksum:", req_checksum)

        res_checksum = hashlib.md5(cr_response).hexdigest()
        print("Response checksum:", res_checksum)

        header_checksum = hashlib.md5(client.header.encode()).hexdigest()
        print("Header checksum:", header_checksum)

        content_checksum = hashlib.md5(client.content.encode()).hexdigest()
        print("Content checksum:", content_checksum)

        # --- content encoding --- #
        content_length = client.get_content_length()
        print("Content length:", content_length)

    else:
        # Redirect stdout to a null stream to suppress output
        runner = unittest.TextTestRunner(stream=NullWriter())
        unittest.main(testRunner=runner, exit=False)
        
        # TIPS: jika output dirasa ada yg salah, dan tidak menampilkan kesalahan di unittest, coba uncomment kode di bawah, dan comment dua baris di atas
        # unittest.main()
